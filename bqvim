#!/bin/bash

# bqvim

BQ_CONFIG_PATH="config.json"
BQ_CONFIG_ROOT='["software"]["vim"]'

check_bq_path_config () {

  # TODO check content of variable

  :
}


# Get status, whether the file path exists or not.
get_path_exists () {
  local path="${1}"
  file "${HOME}/${path}" | egrep -q -v " \(No such file or directory\)$"
  echo $?
}


# Get md5 hash from path.
get_path_md5 () {
  local path="${1}"
  local path_exists="${2:-1}"
  if [[ "${path_exists}" != "0" ]]; then
    echo ""
    return 1
  fi
  echo $(md5sum -q "${HOME}/${path}" 2>/dev/null)
}

# Get status, whether the URL exists or not.
get_url_exists () {
  local url="${1}"
  if [[ -z "${url}" ]]; then
    return 1
  fi
  curl -s --head "${url}" | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null
  echo $?
}

# Get md5 hash from url.
get_url_md5 () {
  local url="${1}"
  local url_exists="${2:-1}"
  if [[ "${path_exists}" != "0" ]]; then
    echo ""
    return 1
  fi
  echo $(curl -s "${url}" | md5sum)
}

existing_config_path () {

  # check a config path exists or not

  local json_path="${1}"

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print json.load(sys.stdin)${json_path}" \
    &> /dev/null

  return $?
}


get_no_config_values () {

  # count number of config values

  local json_path="${1}"

  if ! existing_config_path "${json_path}"; then
    echo 0
  fi

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print len(json.load(sys.stdin)${json_path})" \
    2> /dev/null
}


get_config_value () {

  # get a value fron the configuration file

  local json_path="${1}"

  if ! existing_config_path "${json_path}"; then
    echo
  fi

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print json.load(sys.stdin)${json_path}" \
    2> /dev/null
}


bq_run_files () {

  # make files

  echo "files"

  if ! existing_config_path $BQ_CONFIG_ROOT'["files"]'; then
    echo "  - nothing to do"
    return
  fi

  local no_files=$(($(get_no_config_values $BQ_CONFIG_ROOT'["files"]')))
  local no_files_finished=0

  for (( counter=1; counter<=$no_files; counter++ )); do

    local config_root=$BQ_CONFIG_ROOT'["files"]['$(( $counter - 1))']'
    local name=$(get_config_value $config_root'["name"]')
    local path=$(get_config_value $config_root'["path"]')
    local path_exists=$(get_path_exists "${path}")
    local path_md5=$(get_path_md5 "${path}" "${path_exists}")
    local make=$(get_config_value $config_root'["make"]')
    local url=$(get_config_value $config_root'["url"]')
    local url_exists=$(get_url_exists "${url}")
    local url_md5=$(get_url_md5 "${url}" "${url_exists}")

    printf "%-30s (%s) %5s <[%6s] %5s (%s) %s \n" \
      "${path}" "${path_exists}" "${path_md5:0:5}" "${make}" \
      "${path_md5:0:5}" "${url_exists}" "${url}"

    if [[ "${path_exists}" != '0' && "${make}" = "mkdir" ]]; then

      echo "   - '${name}' create directory"
      mkdir "${HOME}/${path}" 2>/dev/null
      continue

    fi

    if [[ "${path_exists}" != '0' && "${make}" = 'git' ]]; then

      echo "   - '${name}' clone with git"
      git clone "${url}" "${HOME}/${path}" 2>/dev/null
      continue

    fi

    if [[ "${path_exists}" != '0' && ${make} = 'curl' ]]; then

      echo "   - '${name}' new downloaded with curl"
      curl -LSso "${HOME}/${path}" "${url}" 1>/dev/null
      continue

    fi

    if [[ "${path_exists}" = '0' && "${url_exists}" = '0' && "${path_md5}" != "${url_md5}" && "${make}" = 'curl' ]]; then

      echo "   - '${name}' update with new version"
      curl -LSso "${HOME}/${path}" "${url}" # 1>/dev/null
      continue

    fi

    if [[ "${path_exists}" = '0' && "${url_exists}" = '0' && "${make}" = "git" ]]; then

      # git -C "${HOME}/${path}" remote update 1>/dev/null
      if [[ $(git -C "${HOME}/${path}" status -uno --porcelain) ]]; then

        echo "   - '${name}' update via git"
        git -C "${HOME}/${path}" pull
        continue

      fi

    fi

    echo "   - '${name}' not changed"

  done
}


main () {

  check_bq_path_config

  bq_run_files
}


main "${@}"

#!/bin/bash

# bqvim

BQ_CONFIG_PATH="config.json"
BQ_CONFIG_ROOT='["software"]["vim"]'

check_bq_path_config () {

  # TODO check content of variable

  :
}


is_file_path () {

  # check file path is valid

  local file_path="${1}"

  file "${HOME}/${file_path}" | egrep -q -v " \(No such file or directory\)$"

  return $?
}


is_file_type () {

  # check a file type is valid

  local file_path="${1}"
  local file_type="${2}"

  file "${HOME}/${file_path}" | cut -c$((${#HOME} + 1 + ${#file_path} + 3))- | egrep -q "^${file_type}$"

  return $?
}


is_config_path () {

  # check a config path exists or not

  local json_path="${1}"

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print json.load(sys.stdin)${json_path}" \
    &> /dev/null

  return $?
}


get_no_config_values () {

  # count number of config values

  local json_path="${1}"

  if ! is_config_path "${json_path}"; then
    echo 0
  fi

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print len(json.load(sys.stdin)${json_path})" \
    2> /dev/null
}


get_config_value () {

  # get a value fron the configuration file

  local json_path="${1}"

  if ! is_config_path "${json_path}"; then
    echo
  fi

  cat $BQ_CONFIG_PATH \
    | python -c "import sys, json; print json.load(sys.stdin)${json_path}" \
    2> /dev/null
}


bq_run_files () {

  # make files

  echo "files"

  if ! is_config_path $BQ_CONFIG_ROOT'["files"]'; then
    echo "  - nothing to do"
    return
  fi

  local no_files=$(($(get_no_config_values $BQ_CONFIG_ROOT'["files"]')))
  local no_files_finished=0

  for (( counter=1; counter<=$no_files; counter++ )); do

    local config_root=$BQ_CONFIG_ROOT'["files"]['$(( $counter - 1))']'
    local name=$(get_config_value $config_root'["name"]')
    local path=$(get_config_value $config_root'["path"]')
    local type=$(get_config_value $config_root'["type"]')
    local loader=$(get_config_value $config_root'["loader"]')
    local url=$(get_config_value $config_root'["url"]')

    if ! is_file_path "${path}" && [[ -z "${loader}" && "${type}" = "directory" ]]; then

      echo "   - '${name}' create directory"
      # mkdir "${HOME}/${path}" 2>/dev/null
      continue

    fi

    if ! is_file_path "${path}" && [[ ${loader} = 'git' ]]; then

      echo "   - '${name}' clone with git"
      # git clone "${url}" "${HOME}/${path}" 2>/dev/null
      continue

    fi

    if ! is_file_path "${path}" && [[ ${loader} = 'curl' ]]; then

      echo "   - '${name}' download with curl"
      # curl -LSso "${HOME}/${path}" "${url}" 1>/dev/null
      continue

    fi

    if is_file_path "${path}" && is_file_type "${path}" "${type}" && [[ "${loader}" = "git" ]]; then

      # git -C "${HOME}/${path}" remote update 1>/dev/null
      if [[ $(git -C "${HOME}/${path}" status -uno --porcelain) ]]; then

        echo "   - '${name}' update via git"
        # git -C "${HOME}/${path}" pull
        continue

      fi

    fi

    echo "   - '${name}' not changed"

  done
}


main () {

  check_bq_path_config

  bq_run_files
}


main "${@}"
